require 'mechanize'

mechanize = Mechanize.new

files = [
"countrypdf_ae.txt",
"countrypdf_af.txt",
"countrypdf_ag.txt",
"countrypdf_aj.txt",
"countrypdf_al.txt",
"countrypdf_am.txt",
"countrypdf_ao.txt",
"countrypdf_ar.txt",
"countrypdf_as.txt",
"countrypdf_au.txt",
"countrypdf_ay.txt",
"countrypdf_bc.txt",
"countrypdf_bd.txt",
"countrypdf_be.txt",
"countrypdf_bf.txt",
"countrypdf_bg.txt",
"countrypdf_bh.txt",
"countrypdf_bk.txt",
"countrypdf_bl.txt",
"countrypdf_bm.txt",
"countrypdf_bn.txt",
"countrypdf_bo.txt",
"countrypdf_bp.txt",
"countrypdf_br.txt",
"countrypdf_bt.txt",
"countrypdf_bu.txt",
"countrypdf_bx.txt",
"countrypdf_by.txt",
"countrypdf_ca.txt",
"countrypdf_cb.txt",
"countrypdf_cd.txt",
"countrypdf_ce.txt",
"countrypdf_cg.txt",
"countrypdf_ch.txt",
"countrypdf_ci.txt",
"countrypdf_cm.txt",
"countrypdf_co.txt",
"countrypdf_cs.txt",
"countrypdf_ct.txt",
"countrypdf_cu.txt",
"countrypdf_cy.txt",
"countrypdf_da.txt",
"countrypdf_dj.txt",
"countrypdf_dr.txt",
"countrypdf_ec.txt",
"countrypdf_eg.txt",
"countrypdf_ei.txt",
"countrypdf_ek.txt",
"countrypdf_en.txt",
"countrypdf_er.txt",
"countrypdf_es.txt",
"countrypdf_et.txt",
"countrypdf_ez.txt",
"countrypdf_fi.txt",
"countrypdf_fj.txt",
"countrypdf_fk.txt",
"countrypdf_fr.txt",
"countrypdf_ga.txt",
"countrypdf_gb.txt",
"countrypdf_gg.txt",
"countrypdf_gh.txt",
"countrypdf_gl.txt",
"countrypdf_gm.txt",
"countrypdf_gr.txt",
"countrypdf_gt.txt",
"countrypdf_gv.txt",
"countrypdf_gy.txt",
"countrypdf_ha.txt",
"countrypdf_ho.txt",
"countrypdf_hr.txt",
"countrypdf_hu.txt",
"countrypdf_ic.txt",
"countrypdf_id.txt",
"countrypdf_in.txt",
"countrypdf_ir.txt",
"countrypdf_is.txt",
"countrypdf_it.txt",
"countrypdf_iv.txt",
"countrypdf_iz.txt",
"countrypdf_ja.txt",
"countrypdf_jm.txt",
"countrypdf_jo.txt",
"countrypdf_ke.txt",
"countrypdf_kg.txt",
"countrypdf_kn.txt",
"countrypdf_ks.txt",
"countrypdf_ku.txt",
"countrypdf_kv.txt",
"countrypdf_kz.txt",
"countrypdf_la.txt",
"countrypdf_le.txt",
"countrypdf_lg.txt",
"countrypdf_lh.txt",
"countrypdf_li.txt",
"countrypdf_lo.txt",
"countrypdf_lt.txt",
"countrypdf_lu.txt",
"countrypdf_ly.txt",
"countrypdf_ma.txt",
"countrypdf_md.txt",
"countrypdf_mg.txt",
"countrypdf_mi.txt",
"countrypdf_mj.txt",
"countrypdf_mk.txt",
"countrypdf_ml.txt",
"countrypdf_mo.txt",
"countrypdf_mr.txt",
"countrypdf_mu.txt",
"countrypdf_mx.txt",
"countrypdf_my.txt",
"countrypdf_mz.txt",
"countrypdf_nc.txt",
"countrypdf_ng.txt",
"countrypdf_nh.txt",
"countrypdf_ni.txt",
"countrypdf_nl.txt",
"countrypdf_no.txt",
"countrypdf_np.txt",
"countrypdf_ns.txt",
"countrypdf_nu.txt",
"countrypdf_nz.txt",
"countrypdf_od.txt",
"countrypdf_pa.txt",
"countrypdf_pe.txt",
"countrypdf_pk.txt",
"countrypdf_pl.txt",
"countrypdf_pm.txt",
"countrypdf_po.txt",
"countrypdf_pp.txt",
"countrypdf_pu.txt",
"countrypdf_qa.txt",
"countrypdf_ri.txt",
"countrypdf_ro.txt",
"countrypdf_rp.txt",
"countrypdf_rq.txt",
"countrypdf_rs.txt",
"countrypdf_rw.txt",
"countrypdf_sa.txt",
"countrypdf_sf.txt",
"countrypdf_sg.txt",
"countrypdf_si.txt",
"countrypdf_sl.txt",
"countrypdf_so.txt",
"countrypdf_sp.txt",
"countrypdf_su.txt",
"countrypdf_sw.txt",
"countrypdf_sy.txt",
"countrypdf_sz.txt",
"countrypdf_td.txt",
"countrypdf_th.txt",
"countrypdf_ti.txt",
"countrypdf_to.txt",
"countrypdf_ts.txt",
"countrypdf_tt.txt",
"countrypdf_tu.txt",
"countrypdf_tw.txt",
"countrypdf_tx.txt",
"countrypdf_tz.txt",
"countrypdf_ug.txt",
"countrypdf_uk.txt",
"countrypdf_up.txt",
"countrypdf_us.txt",
"countrypdf_uv.txt",
"countrypdf_uy.txt",
"countrypdf_uz.txt",
"countrypdf_ve.txt",
"countrypdf_vm.txt",
"countrypdf_wa.txt",
"countrypdf_wi.txt",
"countrypdf_wz.txt",
"countrypdf_ym.txt",
"countrypdf_za.txt",
"countrypdf_zi.txt"]

worldbook = {
"AE" => "United Arab Emirates",
"AF" => "Afghanistan",
"DZ" => "Algeria",
"AZ" => "Azerbaijan",
"AL" => "Albania",
"AM" => "Armenia",
"AO" => "Angola",
"AR" => "Argentina",
"AU" => "Australia",
"AT" => "Austria",
"TF" => "Antarctica",
"BW" => "Botswana",
"AA" => "Bermuda",
"BE" => "Belgium",
"BS" => "Bahamas, The",
"BD" => "Bangladesh",
"BZ" => "Belize",
"BA" => "Bosnia and Herzegovina",
"BO" => "Bolivia",
"MM" => "Burma",
"BJ" => "Benin",
"BY" => "Belarus",
"BR" => "Brazil",
"BT" => "Bhutan",
"BG" => "Bulgaria",
"BN" => "Brunei",
"BI" => "Burundi",
"CA" => "Canada",
"KH" => "Cambodia",
"TD" => "Chad",
"LK" => "Sri Lanka",
"CG" => "Congo, Democratic Republic of the",
"CN" => "China",
"CL" => "Chile",
"CM" => "Cameroon",
"CO" => "Colombia",
"CR" => "Costa Rica",
"CF" => "Central African Republic",
"CU" => "Cuba",
"-99" => "Cyprus",
"DA" => "Denmark",
"DJ" => "Djibouti",
"DO" => "Dominican Republic",
"EC" => "Ecuador",
"EG" => "Egypt",
"IE" => "Ireland",
"GQ" => "Equatorial Guinea",
"EE" => "Estonia",
"ER" => "Eritrea",
"SV" => "El Salvador",
"ET" => "Ethiopia",
"EZ" => "Czech Republic",
"FI" => "Finland",
"FJ" => "Fiji",
"FK" => "Falkland Islands (Islas Malvinas)",
"FR" => "France",
"GM" => "Gambia, The",
"GA" => "Gabon",
"GE" => "Georgia",
"GH" => "Ghana",
"GL" => "Greenland",
"DE" => "Germany",
"GR" => "Greece",
"GT" => "Guatemala",
"GN" => "Guinea",
"GY" => "Guyana",
"HT" => "Haiti",
"HN" => "Honduras",
"HR" => "Croatia",
"HU" => "Hungary",
"IS" => "Iceland",
"ID" => "Indonesia",
"IN" => "India",
"IR" => "Iran",
"IL" => "Israel",
"IT" => "Italy",
"CI" => "Cote d'Ivoire",
"IQ" => "Iraq",
"JP" => "Japan",
"JM" => "Jamaica",
"JO" => "Jordan",
"KE" => "Kenya",
"KG" => "Kyrgyzstan",
"KP" => "Korea, North",
"KR" => "Korea, South",
"KW" => "Kuwait",
"KV" => "Kosovo",
"KZ" => "Kazakhstan",
"LA" => "Laos",
"LB" => "Lebanon",
"LV" => "Latvia",
"LT" => "Lithuania",
"LR" => "Liberia",
"SK" => "Slovakia",
"LS" => "Lesotho",
"LU" => "Luxembourg",
"LY" => "Libya",
"MG" => "Madagascar",
"MD" => "Moldova",
"MN" => "Mongolia",
"MW" => "Malawi",
"ME" => "Montenegro",
"MK" => "Macedonia",
"ML" => "Mali",
"MA" => "Morocco",
"MR" => "Mauritania",
"OM" => "Oman",
"MX" => "Mexico",
"MY" => "Malaysia",
"MZ" => "Mozambique",
"NC" => "New Caledonia",
"NE" => "Niger",
"VU" => "Vanuatu",
"NI" => "Nigeria",
"NL" => "Netherlands",
"NO" => "Norway",
"NP" => "Nepal",
"SR" => "Suriname",
"NG" => "Nicaragua",
"NZ" => "New Zealand",
"SS" => "South Sudan",
"PY" => "Paraguay",
"PE" => "Peru",
"PK" => "Pakistan",
"PL" => "Poland",
"PA" => "Panama",
"PT" => "Portugal",
"PP" => "Papua New Guinea",
"GW" => "Guinea-Bissau",
"QA" => "Qatar",
"RS" => "Serbia",
"RO" => "Romania",
"PH" => "Philippines",
"PR" => "Puerto Rico",
"RU" => "Russia",
"RW" => "Rwanda",
"SA" => "Saudi Arabia",
"ZA" => "South Africa",
"SN" => "Senegal",
"SI" => "Slovenia",
"SL" => "Sierra Leone",
"SB" => "Solomon Islands",
"SO" => "Somalia",
"ES" => "Spain",
"SD" => "Sudan",
"SE" => "Sweden",
"SY" => "Syria",
"CH" => "Switzerland",
"TT" => "Trinidad and Tobago",
"TH" => "Thailand",
"TJ" => "Tajikistan",
"TG" => "Togo",
"TN" => "Tunisia",
"TL" => "Timor-Leste",
"TR" => "Turkey",
"TW" => "Taiwan",
"TM" => "Turkmenistan",
"TZ" => "Tanzania",
"UG" => "Uganda",
"GB" => "United Kingdom",
"UA" => "Ukraine",
"US" => "United States",
"BF" => "Burkina Faso",
"UY" => "Uruguay",
"UZ" => "Uzbekistan",
"VE" => "Venezuela",
"VN" => "Vietnam",
"NA" => "Namibia",
"EH" => "Western Sahara",
"SZ" => "Swaziland",
"YE" => "Yemen",
"ZM" => "Zambia",
"ZW" => "Zimbabwe",
}

world = worldbook.invert

class Country
	attr_accessor 
	attr_accessor :code, :name, :climate, :terrain, :natural_resources, 
								:languages, :religions, :capital, :file
	def initialize(args = {})
		@code = nil
		@name = args[:name]
		@climate = args[:climate]
		@terrain = args[:terrain]
		@natural_resources = args[:natural_resources]
		@languages = args[:languages]
		@religions = args[:religions]
		@capital = args[:capital]
		@file = args[:file]
	end
end

# text = File.read("countrypdf_cr.txt")
# puts (/(?<=Capital:).*(?=geographic)/).match(text)

array = []
files.each do |file|
	text = File.read(file)
	(/(?<=Introduction:: ).*(?=Background)/).match(text) == nil ? 
	name = (/(?<=Introduction :: ).*(?=Background)/).match(text)[0].chomp : 
	name = (/(?<=Introduction:: ).*(?=Background)/).match(text)[0].chomp
	name = "Tunisia" if name == "T unisia"
	name = "Taiwan" if name == "T aiwan"
	name = "Togo" if name == "T ogo"
	name = "Venezuela" if name == "V enezuela"
	name = "Yemen" if name == "Y emen"
	if name != "Antarctica"
		(/(?<=Capital:).*(?=geographic)/).match(text) == nil ?
		capital = (/(?<=Capital:).*(?=time)/).match(text)[0].chomp :
		capital = (/(?<=Capital:).*(?=geographic)/).match(text)[0].chomp
		capital.gsub('name: ', '')
	else
		capital = nil
	end
	(/(?<=Natural resources:\r).*(?=Land)/).match(text) == nil ?
	nat = (/(?<=Natural resources:\r).*(?=People)/).match(text)[0].chomp :
	nat = (/(?<=Natural resources:\r).*(?=Land)/).match(text)[0].chomp
	name == "Antarctica" ? lang = "All" : lang = (/(?<=Languages:\r).*(?=Religions)/).match(text)[0].chomp
	name == "Antarctica" ? rel = "All" : rel = (/(?<=Religions:\r).*(?=Population:)/).match(text)[0].chomp
	name
	count = Country.new({
		name: name,
		climate: (/(?<=Climate:\r).*(?=Terrain)/).match(text)[0].chomp,
		terrain: (/(?<=Terrain:\r).*(?=Elevation)/).match(text)[0].chomp,
		natural_resources: nat,
		languages: lang,
		religions: rel,
		capital: capital,
		file: file
	})
	count.code = world[count.name]
	count.name = count.name.slice!(0..199) if count.name.length > 200
	count.climate = count.climate.slice!(0..199) if count.climate.length > 200
	count.terrain = count.terrain.slice!(0..199) if count.terrain.length > 200
	count.natural_resources = count.natural_resources.slice!(0..199) if count.natural_resources.length > 200
	count.languages = count.languages.slice!(0..199) if count.languages.length > 200
	count.religions = count.religions.slice!(0..199) if count.religions.length > 200
	(count.capital = count.capital.slice!(0..199) if count.capital.length > 200) if count.name != "Antarctica"
	array << count
end

array.each do |count|
	p '*************************************'
	puts "Name: #{count.name}"
	puts "Code: #{count.code}"
	puts "Climate: #{count.climate}"
	puts "Terrain: #{count.terrain}"
	puts "Natural Resources: #{count.natural_resources}"
	puts "Languages: #{count.languages}"
	puts "Religions: #{count.religions}"
	puts "Capital: #{count.capital}"
end
